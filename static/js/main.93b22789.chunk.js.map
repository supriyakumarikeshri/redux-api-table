{"version":3,"sources":["redux/table/tableReducer.js","redux/table/tableTypes.js","redux/rootReducer.js","redux/store.js","components/TableContainer.js","redux/table/tableActions.js","App.js","serviceWorker.js","index.js"],"names":["initialState","url","loading","error","tableReducer","state","action","type","fetchedData","rootReducer","combineReducers","table","store","createStore","applyMiddleware","thunk","TableContainer","this","props","fetchTableData","header","tableData","Object","keys","tableHeader","map","val","rowObj","i","td","ind","key","id","React","Component","connect","dispatch","fetch","then","res","json","data","requestTableDataSuccess","err","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"uRAEMA,EAAe,CACnBC,IAAK,GACLC,SAAS,EACTC,OAAO,GA+BOC,EA7BK,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCACrD,OAAQA,EAAOC,MACb,ICT+B,sBDU7B,OAAO,2BACHF,GADJ,IAEEG,YAAa,GACbN,SAAS,EACTC,OAAO,IAEX,ICfyC,gCDgBvC,OAAO,2BACHE,GADJ,IAEEG,YAAaF,EAAOE,YACpBN,SAAS,EACTC,OAAO,IAEX,ICrBsC,6BDsBpC,OAAO,2BACHE,GADJ,IAEEG,YAAa,GACbN,SAAS,EACTC,OAAO,IAEX,QACE,OAAOE,IExBEI,EAJKC,YAAgB,CACnCC,MAAOP,ICGOQ,EAFDC,YAAYJ,EAAaK,YAAgBC,M,gCCDjDC,G,wLAEFC,KAAKC,MAAMC,mB,+BAIL,IAAIC,EAASH,KAAKC,MAAMG,UAAaC,OAAOC,KAAKN,KAAKC,MAAMG,UAAU,IAAM,GACtEG,EAAcJ,GAAUA,EAAOK,KAAI,SAAAC,GAEjB,OACY,4BAAKA,MAGnCL,EAAWJ,KAAKC,MAAMG,WAAaJ,KAAKC,MAAMG,UAAUI,KAAI,SAACE,EAAQC,GACzD,IAAIC,EAAKP,OAAOC,KAAKI,GAAQF,KAAI,SAACC,EAAKI,GACjC,OAAO,wBAAIC,IAAKD,GAAMH,EAAOD,OAErC,OACI,wBAAIK,IAAKH,GAAIC,MAGjC,OACE,6BAEEZ,KAAKC,MAAMhB,QACT,yCACAe,KAAKC,MAAMf,MACX,+CACM,2BAAO6B,GAAG,aACR,+BACE,4BACGR,IAGL,+BACKH,S,GAnCAY,IAAMC,YAwDpBC,eAdS,SAAA9B,GACtB,MAAM,CACJgB,UAAYhB,EAAMM,MAAMH,YACxBN,QAASG,EAAMM,MAAMT,QACrBC,MAAOE,EAAMM,MAAMR,UAKI,SAACiC,GACxB,MAAO,CACHjB,eAAgB,kBAAMiB,GCtCrB,SAACA,GACNA,EAdK,CAAE7B,KJNwB,wBIqB/B8B,MAAM,+CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAAAG,GAAI,OAAIL,EAfgB,SAACK,GAC/B,MAAO,CAAElC,KJTkC,gCISGC,YAAaiC,GAcpCC,CAAwBD,OACzC,SAAAE,GAAG,OAAIP,EAXN,CAAE7B,KJZ+B,yCG0D3B4B,CAA4CnB,GE5C5C4B,MAVf,WACE,OACC,kBAAC,IAAD,CAAUhC,MAAOA,GAChB,yBAAKiC,UAAU,OACb,kBAAC,EAAD,SCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAA1D,GACL2D,QAAQ3D,MAAMA,EAAM4D,c","file":"static/js/main.93b22789.chunk.js","sourcesContent":["import { REQUESTED_TABLEDATA, REQUESTED_TABLEDATA_SUCCEEDED, REQUESTED_TABLEDATA_FAILED  } from './tableTypes';\r\n \r\nconst initialState = {\r\n  url: '',\r\n  loading: false,\r\n  error: false,\r\n};\r\nconst tableReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case REQUESTED_TABLEDATA:\r\n      return {\r\n      \t...state,//current copy of state,\r\n        fetchedData: '',\r\n        loading: true,\r\n        error: false, \r\n      };\r\n    case REQUESTED_TABLEDATA_SUCCEEDED:\r\n      return {\r\n      \t...state,//current copy of state\r\n        fetchedData: action.fetchedData,\r\n        loading: false,\r\n        error: false,\r\n      };\r\n    case REQUESTED_TABLEDATA_FAILED:\r\n      return {\r\n      \t...state,//current copy of state\r\n        fetchedData: '',\r\n        loading: false,\r\n        error: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n \r\n\r\n export default tableReducer//importing in rootReducer(which is collection of all reducer)","export const REQUESTED_TABLEDATA = 'REQUESTED_TABLEDATA'\r\nexport const REQUESTED_TABLEDATA_SUCCEEDED = 'REQUESTED_TABLEDATA_SUCCEEDED'\r\nexport const REQUESTED_TABLEDATA_FAILED = 'REQUESTED_TABLEDATA_FAILED'\r\n\r\n\r\n\r\n\r\n","import { combineReducers } from 'redux'\nimport tableReducer from './table/tableReducer'\n\nconst rootReducer = combineReducers({\n\ttable: tableReducer\n})\n\nexport default rootReducer;//importing in store","/*to provide redux-store to react-app, the react-redux library has component called provider*/\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './rootReducer'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport default store;","import React from 'react';\r\nimport { connect } from 'react-redux';//connect is high order component of react redux,connect react component to redux store\r\nimport { fetchTableData } from '../redux';//importing from index file of redux folder\r\nimport '../css/TableContainerCss.css'; \r\nclass TableContainer extends React.Component {\r\n  componentDidMount(){\r\n    this.props.fetchTableData();//1. \r\n  }\r\n    render() { \r\n           \r\n          var header = this.props.tableData ?  Object.keys(this.props.tableData[0]) : \"\";\r\n          const tableHeader = header && header.map(val=> \r\n                              {\r\n                                  return (\r\n                                              <th>{val}</th>\r\n                                           );\r\n                              });\r\n          const tableData =this.props.tableData && this.props.tableData.map((rowObj, i) => {\r\n                            let td = Object.keys(rowObj).map((val, ind) => {\r\n                                  return <td key={ind}>{rowObj[val]}</td>  \r\n                          })\r\n                          return (\r\n                              <tr key={i}>{td}</tr>\r\n                            )\r\n                    }); \r\n          return(\r\n            <div>\r\n            {\r\n              this.props.loading \r\n              ? <p>Loading...</p> \r\n              : this.props.error\r\n              ? <p>Error, try again</p>\r\n                    : <table id=\"customers\">\r\n                        <thead>\r\n                          <tr>\r\n                            {tableHeader} \r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {tableData} \r\n                         </tbody>\r\n                      </table>\r\n                } \r\n              </div> );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n  return{\r\n    tableData : state.table.fetchedData,\r\n    loading: state.table.loading,\r\n    error: state.table.error\r\n  }\r\n}\r\n \r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchTableData: () => dispatch(fetchTableData())\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TableContainer);  \r\n","import { REQUESTED_TABLEDATA, REQUESTED_TABLEDATA_SUCCEEDED, REQUESTED_TABLEDATA_FAILED  } from './tableTypes';\r\n\r\n \r\n\r\n// Action Creators\r\nconst requestTableData = () => {\r\n  return { type: REQUESTED_TABLEDATA }\r\n};\r\n\r\nconst requestTableDataSuccess = (data) => {\r\n  return { type: REQUESTED_TABLEDATA_SUCCEEDED, fetchedData: data}\r\n};\r\n\r\nconst requestTableDataError = () => {\r\n  return { type: REQUESTED_TABLEDATA_FAILED }\r\n};\r\n\r\n//this method will get call from main app(TableContainer),\r\nexport const fetchTableData = () => {//importing in TableContainer\r\n  return (dispatch) => {\r\n    dispatch(requestTableData());//dispatching method for tableReducer\r\n    fetch('https://jsonplaceholder.typicode.com/todos/') \r\n      .then(res => res.json())\r\n      .then(\r\n        data => dispatch(requestTableDataSuccess(data)),//dispatching method for tableReducer\r\n        err => dispatch(requestTableDataError())//dispatching method for tableReducer\r\n      );\r\n  }\r\n};","/*to provide redux-store to react-app, the react-redux library has component called provider*/\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport TableContainer from './components/TableContainer'; \n \nfunction App() {\n  return (\n  \t<Provider store={store}>\n    <div className=\"App\">\n      <TableContainer />\n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}